// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Runner.Application.Database;

#nullable disable

namespace Runner.Application.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230916233331_RunTables")]
    partial class RunTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Runner.Application.Models.DifficultyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("difficulty");

                    b.HasKey("Id")
                        .HasName("pk_difficulty_levels");

                    b.HasIndex("Difficulty")
                        .IsUnique()
                        .HasDatabaseName("ix_difficulty_levels_difficulty");

                    b.ToTable("difficulty_levels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Difficulty = "Beginner"
                        },
                        new
                        {
                            Id = -2,
                            Difficulty = "Intermediate"
                        },
                        new
                        {
                            Id = -3,
                            Difficulty = "Advanced"
                        },
                        new
                        {
                            Id = -4,
                            Difficulty = "Pro"
                        });
                });

            modelBuilder.Entity("Runner.Application.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("GoalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("goal_name");

                    b.HasKey("Id")
                        .HasName("pk_goals");

                    b.HasIndex("GoalName")
                        .IsUnique()
                        .HasDatabaseName("ix_goals_goal_name");

                    b.ToTable("goals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            GoalName = "5K"
                        },
                        new
                        {
                            Id = -2,
                            GoalName = "10K"
                        },
                        new
                        {
                            Id = -3,
                            GoalName = "Half Marathon"
                        },
                        new
                        {
                            Id = -4,
                            GoalName = "Marathon"
                        });
                });

            modelBuilder.Entity("Runner.Application.Models.JournalNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("note");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_journal_notes");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_journal_notes_user_id");

                    b.ToTable("journal_notes", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User"
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Runner.Application.Models.RunType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_run_types");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_run_types_name");

                    b.ToTable("run_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Non-weight-bearing aerobic activities such as aqua-jogging, swimming, or cycling. Be sure to perform them at conversation effort for 20-40 minutes.",
                            Name = "Cross-training"
                        },
                        new
                        {
                            Id = -2,
                            Description = "Very relaxed effort over flat terrain (track or trail or walk the hills on your favorite route)",
                            Name = "Recovery Run"
                        },
                        new
                        {
                            Id = -3,
                            Description = "After 2 mile warm-up (very relaxed effort), settle into conversation effort.",
                            Name = "Semi-Long Run"
                        },
                        new
                        {
                            Id = -4,
                            Description = "After 2 mile warm-up (very relaxed effort), settle into conversation effort",
                            Name = "Long Run"
                        },
                        new
                        {
                            Id = -5,
                            Description = "Find some hills on your route and stay relaxed on the uphills.",
                            Name = "Hilly Run"
                        },
                        new
                        {
                            Id = -6,
                            Description = "8G (4-3-1) means go easy for 4 miles, 3 miles at goal pace, 1 mile cool down.",
                            Name = "Goal Pace Run"
                        },
                        new
                        {
                            Id = -7,
                            Description = "7(5-1-1) means go easy for 5 miles, 1 mile at long fast pace, 1 mile cool down.",
                            Name = "Long Fast Run"
                        },
                        new
                        {
                            Id = -8,
                            Description = "7SF: 6X800 means to perform a track workout of six 800 meter repeats.",
                            Name = "Short fast run"
                        },
                        new
                        {
                            Id = -9,
                            Description = "The two workouts are interchangeable. Choose the ONE that fits your schedule.",
                            Name = "Or"
                        },
                        new
                        {
                            Id = -10,
                            Description = "You can add this workout to the end of any of the other workouts. It is optional.",
                            Name = "And Optional"
                        });
                });

            modelBuilder.Entity("Runner.Application.Models.SchedulePhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_schedule_phases");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_schedule_phases_name");

                    b.ToTable("schedule_phases", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Endurance"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Strength"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Speed"
                        },
                        new
                        {
                            Id = -4,
                            Name = "Taper"
                        },
                        new
                        {
                            Id = -5,
                            Name = "Recovery"
                        });
                });

            modelBuilder.Entity("Runner.Application.Models.TemplateRunEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("DayNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("day_number");

                    b.Property<int>("Distance")
                        .HasColumnType("float")
                        .HasColumnName("distance");

                    b.Property<bool>("Race")
                        .HasColumnType("INTEGER")
                        .HasColumnName("race");

                    b.Property<int>("SchedulePhaseId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("schedule_phase_id");

                    b.Property<int>("TemplateScheduleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("template_schedule_id");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("week_number");

                    b.HasKey("Id")
                        .HasName("pk_template_runs");

                    b.HasIndex("SchedulePhaseId")
                        .HasDatabaseName("ix_template_runs_schedule_phase_id");

                    b.HasIndex("TemplateScheduleId")
                        .HasDatabaseName("ix_template_runs_template_schedule_id");

                    b.ToTable("template_runs", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.TemplateRunEntryRunType", b =>
                {
                    b.Property<int>("TemplateRunId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("template_run_id");

                    b.Property<int>("RunTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("run_type_id");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.HasKey("TemplateRunId", "RunTypeId")
                        .HasName("pk_template_run_run_types");

                    b.HasIndex("RunTypeId")
                        .HasDatabaseName("ix_template_run_run_types_run_type_id");

                    b.ToTable("template_run_run_types", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.TemplateSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("difficulty_level_id");

                    b.Property<int>("GoalId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("goal_id");

                    b.HasKey("Id")
                        .HasName("pk_template_schedules");

                    b.HasIndex("DifficultyLevelId")
                        .HasDatabaseName("ix_template_schedules_difficulty_level_id");

                    b.HasIndex("GoalId")
                        .HasDatabaseName("ix_template_schedules_goal_id");

                    b.ToTable("template_schedules", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("RememberToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("remember_token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.UserGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("due_date");

                    b.Property<string>("GoalDescription")
                        .HasColumnType("TEXT")
                        .HasColumnName("goal_description");

                    b.Property<int?>("GoalId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("goal_id");

                    b.Property<string>("GoalReason")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("goal_reason");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_goals");

                    b.HasIndex("GoalId")
                        .HasDatabaseName("ix_user_goals_goal_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_goals_user_id");

                    b.ToTable("user_goals", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.UserRunEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<double?>("AveragePace")
                        .HasColumnType("REAL")
                        .HasColumnName("average_pace");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_completed");

                    b.Property<DateTime>("DateScheduled")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_scheduled");

                    b.Property<double>("Distance")
                        .HasColumnType("REAL")
                        .HasColumnName("distance");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_completed");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<bool>("Race")
                        .HasColumnType("INTEGER")
                        .HasColumnName("race");

                    b.Property<double?>("Time")
                        .HasColumnType("REAL")
                        .HasColumnName("time");

                    b.Property<int>("UserScheduleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_schedule_id");

                    b.HasKey("Id")
                        .HasName("pk_user_run_entries");

                    b.HasIndex("UserScheduleId")
                        .HasDatabaseName("ix_user_run_entries_user_schedule_id");

                    b.ToTable("user_run_entries", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.UserRunEntryRunType", b =>
                {
                    b.Property<int>("UserRunEntryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_run_entry_id");

                    b.Property<int>("RunTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("run_type_id");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.HasKey("UserRunEntryId", "RunTypeId")
                        .HasName("pk_user_run_entry_run_type");

                    b.HasIndex("RunTypeId")
                        .HasDatabaseName("ix_user_run_entry_run_type_run_type_id");

                    b.ToTable("user_run_entry_run_type", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.UserSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("difficulty_level_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<int>("UserGoalId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_goal_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_schedules");

                    b.HasIndex("DifficultyLevelId")
                        .HasDatabaseName("ix_user_schedules_difficulty_level_id");

                    b.HasIndex("UserGoalId")
                        .HasDatabaseName("ix_user_schedules_user_goal_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_schedules_user_id");

                    b.ToTable("user_schedules", (string)null);
                });

            modelBuilder.Entity("Runner.Application.Models.JournalNote", b =>
                {
                    b.HasOne("Runner.Application.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_journal_notes_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Runner.Application.Models.TemplateRunEntry", b =>
                {
                    b.HasOne("Runner.Application.Models.SchedulePhase", "SchedulePhase")
                        .WithMany()
                        .HasForeignKey("SchedulePhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_runs_schedule_phases_schedule_phase_id");

                    b.HasOne("Runner.Application.Models.TemplateSchedule", "TemplateSchedule")
                        .WithMany()
                        .HasForeignKey("TemplateScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_runs_template_schedules_template_schedule_id");

                    b.Navigation("SchedulePhase");

                    b.Navigation("TemplateSchedule");
                });

            modelBuilder.Entity("Runner.Application.Models.TemplateRunEntryRunType", b =>
                {
                    b.HasOne("Runner.Application.Models.RunType", "RunType")
                        .WithMany("TemplateRunEntryRunTypes")
                        .HasForeignKey("RunTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_run_run_types_run_types_run_type_id");

                    b.HasOne("Runner.Application.Models.TemplateRunEntry", "TemplateRunEntry")
                        .WithMany("TemplateRunRunTypes")
                        .HasForeignKey("TemplateRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_run_run_types_template_runs_template_run_entry_id");

                    b.Navigation("RunType");

                    b.Navigation("TemplateRunEntry");
                });

            modelBuilder.Entity("Runner.Application.Models.TemplateSchedule", b =>
                {
                    b.HasOne("Runner.Application.Models.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_schedules_difficulty_levels_difficulty_level_id");

                    b.HasOne("Runner.Application.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_schedules_goals_goal_id");

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("Runner.Application.Models.UserGoal", b =>
                {
                    b.HasOne("Runner.Application.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_goals_goals_goal_id");

                    b.HasOne("Runner.Application.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_goals_users_user_id");

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Runner.Application.Models.UserRole", b =>
                {
                    b.HasOne("Runner.Application.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Runner.Application.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Runner.Application.Models.UserRunEntry", b =>
                {
                    b.HasOne("Runner.Application.Models.UserSchedule", "UserSchedule")
                        .WithMany()
                        .HasForeignKey("UserScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_run_entries_user_schedules_user_schedule_id");

                    b.Navigation("UserSchedule");
                });

            modelBuilder.Entity("Runner.Application.Models.UserRunEntryRunType", b =>
                {
                    b.HasOne("Runner.Application.Models.RunType", "RunType")
                        .WithMany("UserRunEntryRunTypes")
                        .HasForeignKey("RunTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_run_entry_run_type_run_types_run_type_id");

                    b.HasOne("Runner.Application.Models.UserRunEntry", "UserRunEntry")
                        .WithMany("UserRunEntryRunTypes")
                        .HasForeignKey("UserRunEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_run_entry_run_type_user_run_entries_user_run_entry_id");

                    b.Navigation("RunType");

                    b.Navigation("UserRunEntry");
                });

            modelBuilder.Entity("Runner.Application.Models.UserSchedule", b =>
                {
                    b.HasOne("Runner.Application.Models.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_schedules_difficulty_levels_difficulty_level_id");

                    b.HasOne("Runner.Application.Models.UserGoal", "UserGoal")
                        .WithMany()
                        .HasForeignKey("UserGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_schedules_user_goals_user_goal_id");

                    b.HasOne("Runner.Application.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_schedules_users_user_id");

                    b.Navigation("DifficultyLevel");

                    b.Navigation("User");

                    b.Navigation("UserGoal");
                });

            modelBuilder.Entity("Runner.Application.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Runner.Application.Models.RunType", b =>
                {
                    b.Navigation("TemplateRunEntryRunTypes");

                    b.Navigation("UserRunEntryRunTypes");
                });

            modelBuilder.Entity("Runner.Application.Models.TemplateRunEntry", b =>
                {
                    b.Navigation("TemplateRunRunTypes");
                });

            modelBuilder.Entity("Runner.Application.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Runner.Application.Models.UserRunEntry", b =>
                {
                    b.Navigation("UserRunEntryRunTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
